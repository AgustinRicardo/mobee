// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String            @id @default(uuid())
  username             String
  email                String            @unique
  profile_picture_path String?
  created_at           DateTime          @default(now())
  user_reviews         Review[]
  film_status          FilmWatchStatus[]
  lists                ListSavedByUser[]
  List                 List[]
}

model Film {
  id             String            @id @default(uuid())
  tmdb_id        Int               @unique
  film_reviews   Review[]
  average_rating Float             @default(0)
  lists          FilmsOnLists[]
  film_status    FilmWatchStatus[]
}

model List {
  id             String            @id @default(uuid())
  user_id        String
  user           User              @relation(fields: [user_id], references: [id])
  title          String
  description    String?
  bookmark_count Int               @default(0)
  films          FilmsOnLists[]
  users          ListSavedByUser[]
  created_at     DateTime          @default(now())
}

model ListSavedByUser {
  list    List   @relation(fields: [list_id], references: [id], onDelete: Cascade)
  list_id String
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@id([list_id, user_id])
}

model FilmsOnLists {
  list    List   @relation(fields: [list_id], references: [id], onDelete: Cascade)
  list_id String
  film    Film   @relation(fields: [film_id], references: [id])
  film_id String

  @@id([list_id, film_id])
}

model FilmWatchStatus {
  user     User    @relation(fields: [user_id], references: [id])
  user_id  String
  film     Film    @relation(fields: [film_id], references: [id])
  film_id  String
  to_watch Boolean @default(false)
  watched  Boolean @default(false)

  @@id([user_id, film_id])
}

model Review {
  id                 String    @id @default(uuid())
  user               User      @relation(fields: [user_id], references: [id])
  user_id            String
  film               Film      @relation(fields: [film_id], references: [id])
  film_id            String
  rating             Float?
  review_description String?
  watched_at         DateTime?
  created_at         DateTime  @default(now())
}
